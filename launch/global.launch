<?xml version='1.0'?>
<launch>

	<!-- arguments -->
	<arg name="data" default="test_03"/>


	<!-- replay bag data -->
	<group if="$(eval arg('data')!='real')">

		<param name="use_sim_time" value="true"/>

		<node pkg="rosbag" type="play" name="rosbag_play" args="-s 90 $(find ugv_localization)/bag/$(arg data).bag --clock"/>

	</group>


	<!-- refine imu message into conventional frame -->
	<node pkg="ugv_localization" type="imu_combine.py" name="imu_refine" output="screen">
		<param name="mode" value="refine"/>
		<param name="sensor" value="3dm"/>
		<!-- param name="sensor" value="t265"/ -->
	</node>

	<!-- node pkg="ugv_localization" type="imu_combine.py" name="imu_refine_t265" output="screen">
		<param name="mode" value="refine"/>
		<param name="sensor" value="t265"/>
		<remap from="imu/refined" to="imu/refined/t265"/>
	</node -->


	<!-- get 2D baseline odometry using wheel encoder and imu -->
	<node pkg="ugv_localization" type="wheel_imu_odom.py" name="wheel_imu_odom" args="/wheel_odometry /imu/refined /odometry/wheel_imu" output="screen"/>

	<!-- node pkg="ugv_localization" type="wheel_imu_odom.py" name="wheel_imu_odom_t265" args="/wheel_odometry /imu/refined/t265 /odometry/wheel_imu/t265" output="screen"/ -->


	<!-- convert GPS into map frame -->
	<node pkg="ugv_localization" type="gps_odom_node" name="gps_odom_node" output="screen">
		<param name="coordinate_system" type="string" value="wgs84"/>
		<param name="topic_gps" type="string" value="/gps/fix"/>
		<param name="topic_odom" type="string" value="/odometry/gps"/>
		<param name="latitude" type="double" value="39.326465"/>
		<param name="longitude" type="double" value="-76.621554"/>
		<param name="frame_id" type="string" value="map"/>
		<param name="child_frame_id" type="string" value="base_link"/>
		<param name="cov_threshold" type="double" value="1"/>
		<param name="cov_scale" type="double" value="100"/>
	</node>


	<!-- re-model GPS heading -->
	<node pkg="ugv_localization" type="gps_navheading_node" name="gps_navheading_node" output="screen">
		<param name="topic_out" type="string" value="/gps/navheading/new"/>
		<param name="cov_thresh" type="double" value="1000"/>
	</node>


	<!-- rescale GPS cov -->
	<!-- node pkg="ugv_localization" type="gps_cov_handler.py" name="gps_cov_handler" output="screen"/ -->


	<!-- fusion by robot_localization package -->
 	<node pkg="ugv_localization" type="global_filter_wrapper.py" name="global_filter_wrapper" args="/odometry/wheel_imu /odometry/gps /gps/navheading" output="screen">
		<param name="filter_node_name" value="ekf_odom_gps_imu"/>
		<param name="topic_out" value="odometry/filtered"/>
		<param name="config_file" value="$(find ugv_localization)/config/global/ekf_odom_imu_gps.yaml"/>
	</node>

	<!-- node pkg="ugv_localization" type="global_filter_wrapper.py" name="global_filter_wrapper_t265" args="/odometry/wheel_imu/t265 /odometry/gps /gps/navheading" output="screen">
		<param name="filter_node_name" value="ekf_odom_gps_imu_t265"/>
		<param name="topic_out" value="odometry/filtered/t265"/>
		<param name="config_file" value="$(find ugv_localization)/config/global/ekf_odom_imu_gps_t265.yaml"/>
	</node -->


    <!-- publish required tf (transformation) -->
	<node pkg="tf2_ros" type="static_transform_publisher" name="base_link2gps" args="0 0 0 0 0 0 base_link gps"/>

	<node pkg="tf2_ros" type="static_transform_publisher" name="world2map" args="0 0 0 0 0 0 map /world"/>


	<!-- plot in python -->
    <!-- node pkg="ugv_localization" type="plot_traj.py" name="plot_traj_odom" args="/odometry/filtered odom" output="screen"/ -->

    <!--node pkg="ugv_localization" type="plot_traj.py" name="plot_traj_imu" args="/imu_3dm/imu imu" output="screen"/-->

	<!--node pkg="ugv_localization" type="plot_traj.py" name="plot_traj_gps" args="/rtk_ublox/fix gps" output="screen"/-->
	

	<!-- node pkg="ugv_localization" type="plot_curve.py" name="plot_curve" output="screen">
		<param name="mode" value="global"/>
		<param name="data" value="$(arg data)"/>
	</node -->
	

	<!-- publish /world/fix and visualize with rviz_satellite -->
	<!-- node pkg="ugv_localization" type="world_frame_gps_publisher.py" name="world_frame_gps_publisher"/ -->
	<include file="$(find ugv_localization)/launch/world_frame_gps_publisher.launch"/>

	<!-- node pkg="rviz" type="rviz" name="rviz" args="-d $(find ugv_localization)/rviz/rviz_satellite.rviz"/ -->


	<!-- add lidar map and lidar-based localizer -->
	<!-- include file="$(find ugv_localization)/launch/rampage_map_n_static_tf.launch">
		<arg name="lidarmap" value="gilman"/>
	</include>

	<include file="$(find ugv_localization)/launch/rampage_amcl_diff.launch"/ -->
	<node pkg="ugv_localization" type="amcl_wrapper.py" name="amcl_wrapper" output="screen"/>

	<!-- generate new map -->
    <!-- include file="$(find ugv_localization)/launch/gmapping.launch"/ -->
	<!-- include file="$(find ugv_localization)/launch/hector_slam.launch"/ -->

	<node pkg="rviz" type="rviz" name="rviz" args="-d $(find ugv_localization)/rviz/mapping.rviz"/>


	<!-- visualize map with mapviz -->
	<node pkg="swri_transform_util" type="initialize_origin.py" name="initialize_origin" >
		<param name="local_xy_frame" value="map"/>
    	<param name="local_xy_origin" value="map"/>
    	<rosparam param="local_xy_origins">[{ name: map, latitude: 39.326465, longitude: -76.621554, altitude: 0, heading: 0.0}]</rosparam>
  	</node>

	<node pkg="mapviz" type="mapviz" name="mapviz">
		<param name="config" value="$(find ugv_localization)/config/mapviz.mvc"/>
	</node>


	<!-- click waypoints and generate trajectory -->
	<include file="$(find ugv_localization)/launch/gen_traj.launch"/>

</launch>
