<?xml version='1.0'?>
<launch>

	<!-- arguments -->
	<arg name="data" default="test_03"/>


	<!-- replay bag data -->
	<group if="$(eval arg('data')!='real')">

		<param name="use_sim_time" value="true"/>

		<node pkg="rosbag" type="play" name="rosbag_play" args="-s 600 $(find ugv_localization)/bag/$(arg data).bag --clock"/>

	</group>


	<!-- refine imu message into conventional frame -->
	<node pkg="ugv_localization" type="imu_combine.py" name="imu_refine" output="screen">
		<param name="mode" value="refine"/>
		<param name="sensor" value="3dm"/>
	</node>


	<!-- process sensor input messages altogether -->
	<node pkg="ugv_localization" type="topic_process_node" name="topic_process_node" output="screen">
		<rosparam command="load" file="$(find ugv_localization)/params/topic_process.yaml"/>
	</node>	


	<!-- fusion by robot_localization package -->
 	<node pkg="ugv_localization" type="global_filter_wrapper.py" name="global_filter_wrapper" args="/odometry/wheel_imu /odometry/gps /gps/navheading" output="screen">
		<param name="filter_node_name" value="ekf_odom_gps_imu"/>
		<param name="topic_out" value="odometry/filtered"/>
		<param name="config_file" value="$(find ugv_localization)/params/global/ekf_odom_imu_gps.yaml"/>
	</node>

	<!-- node pkg="ugv_localization" type="global_filter_wrapper.py" name="global_filter_wrapper_t265" args="/odometry/wheel_imu/t265 /odometry/gps /gps/navheading" output="screen">
		<param name="filter_node_name" value="ekf_odom_gps_imu_t265"/>
		<param name="topic_out" value="odometry/filtered/t265"/>
		<param name="config_file" value="$(find ugv_localization)/params/global/ekf_odom_imu_gps_t265.yaml"/>
	</node -->


    <!-- publish required tf (transformation) -->
	<include file="$(find ugv_localization)/launch/static_tfs.launch"/>
	

	<!-- publish /world/fix and visualize with rviz_satellite -->
	<include file="$(find ugv_localization)/launch/world_frame_gps_publisher.launch"/>

	<node pkg="rviz" type="rviz" name="rviz" args="-d $(find ugv_localization)/rviz/amcl.rviz"/>


	<!-- add lidar map and lidar-based localizer -->
	<!-- include file="$(find ugv_localization)/launch/rampage_map_n_static_tf.launch">
		<arg name="lidarmap" value="hackerman"/>
	</include>

	<include file="$(find ugv_localization)/launch/rampage_amcl_diff.launch"/ -->


	<!-- click waypoints and generate trajectory -->
	<include file="$(find ugv_localization)/launch/gen_traj.launch"/>


	<!-- amcl wrapper -->
	<node pkg="ugv_localization" type="amcl_wrapper.py" name="amcl_wrapper" output="screen"/>

</launch>
